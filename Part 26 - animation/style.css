*,
*::before,
*::after {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}
body {
    line-height: 1.6;
    font-family: sans-serif;
}
.heading {
    padding: 15px 5px;
    font-size: 30px;
}
.header2 {
    width: 70%;
    margin: 0 auto;
    background: gray;
    padding: 20px;
}
.header2 h3 {
    color: aliceblue;
    text-align: center;
    font-size: 30px;
    padding: 5px 0;
}
.header2 #nav a {
    display: block;
    padding: 5px;
    color: aliceblue;
    font-size: large;
}
.header2 #nav a:hover {
    color: aqua;
}
.arrow {
    background: #cccccc;
    width: 60px;
    height: 60px;
    border-radius: 50%;
    position: fixed;
    bottom: 50px;
    right: 5px;
    z-index: 100;
}
.arrow .arrow-link {
    box-sizing: border-box;
    position: absolute;
    top: -17px;
    left: 12px;
    color: rgb(51, 0, 235);
    font-size: 45px;
    text-decoration: none;
}

.box {
    width: 200px;
    height: 200px;
    margin: 30px auto;
    text-align: center;
    color: white;
    border-radius: 50%;
}

/**
 * ! @keyframe rule:
 * * when we specify CSS styles inside the @keyframes rule, the animation will gradually change from the current style to the new style at certain times
 *
 * ? keyframe syntax:
 * * @keyframes animation-name {}
 *
 * --> we can define { from {when start} to {before end} } in keyframes block
 * --> we can also define percentage wise animation { 0% {} 25% {} 50% 75% {} 100% {} } in keyframe block
 */

.key {
    background: darkcyan;
}
/* nothing works bcz only keyframe can not create a animation */
@keyframes key {
    from {
        background: darkcyan;
    }
    to {
        background: lightskyblue;
    }
}

/**
 * ! animation-name:
 * ? animation-name: keyframe_name;
 * * for make a animation we should add animation name in style
 */
/* nothing works bcz without animation duration animation can not run */
.an {
    background: darkkhaki;
    animation-name: anim;
}

@keyframes anim {
    100% {
        width: 240px;
        height: 240px;
        background: lightskyblue;
    }
}

/**
 * ! animation-duration:
 * * animation-duration property defines how long time an animation should take to complete
 * note: if the animation-duration property is not specified, no animation will occur, because the default value is 0s (0 seconds)
 */
.dur {
    background: darkgreen;
}
.dur:hover {
    animation-name: anim-dur;
    animation-duration: 3s;
}
@keyframes anim-dur {
    0% {
        background: darkgreen;
    }
    100% {
        background: darkcyan;
        width: 220px;
        height: 220px;
    }
}

/**
 * ! animation-delay:
 * * animation-delay property specifies a delay for the start of an animation
 *
 * ? animation-delay: 3s;
 * --> means 3s delay before starting animation
 *
 * * negative delay value are also allowed
 *
 * note: if we using negative values, the animation will start as if it had already been playing for N seconds
 */

.dl {
    background: darkgrey;
}
.dl:hover {
    animation-name: anim-delay;
    animation-duration: 6s;
    /* animation-delay: -3s; */
    animation-delay: 3s;
}
@keyframes anim-delay {
    0% {
        background: darkgoldenrod;
    }
    25% {
        background: darkmagenta;
    }
    50% {
        background: darkblue;
    }
    75% {
        background: darkkhaki;
    }
    100% {
        background: darkcyan;
    }
}

/**
 * ! animation-iteration-count:
 * ? animation-iteration-count: infinite | any_int_number
 * * animation-iteration-count property specifies the number of times an animation should run
 *
 * * animation-iteration-count: 3;
 * --> means animation will run 3 times
 * --> if infinite iteration will run always
 */

.ai {
    width: 30px;
    height: 30px;
    background: lightcoral;
    animation-name: ai;
    animation-duration: 1s;
    /* animation-iteration-count: 3; */
    animation-iteration-count: infinite;
}
@keyframes ai {
    0% {
        transform: translate(-105px, -30px);
    }
    25% {
        transform: translate(105px, -30px);
    }
    50% {
        transform: translate(105px, 30px);
    }
    75% {
        transform: translate(-105px, 30px);
    }
    100% {
        transform: translate(-105px, -30px);
    }
}

/**
 * ! animation-direction
 * * animation-direction property specifies whether an animation should be played forwards, backwards or in alternate cycles
 *
 * ? animation-direction: normal(default)| alternate| reverse| alternate-reverse
 * - normal - The animation is played as normal (forwards). This is default
 * - alternate - The animation is played forwards first, then backwards
 * - reverse - The animation is played in reverse direction (backwards)
 * - alternate-reverse - The animation is played backwards first, then forwards
 *
 */

.dr1,
.dr2,
.dr3,
.dr4 {
    width: 30px;
    height: 30px;
    background: lightcoral;
    animation-name: dr;
    animation-duration: 2s;
    animation-iteration-count: infinite;
}
.dr1 {
    animation-direction: normal;
}
.dr2 {
    animation-direction: alternate;
}
.dr3 {
    animation-direction: reverse;
}
.dr4 {
    animation-direction: alternate-reverse;
}
@keyframes dr {
    0% {
        transform: translate(-105px, -30px);
    }
    25% {
        transform: translate(105px, -30px);
        background: green;
    }
    50% {
        transform: translate(105px, 30px);
        background: yellow;
    }
    75% {
        transform: translate(-105px, 30px);
        background: grey;
    }
    100% {
        transform: translate(-105px, -30px);
    }
}

/**
 * ! animation-timing-function:
 * * animation-timing-function property specifies the speed curve of the animation
 * - ease - Specifies an animation with a slow start, then fast, then end slowly (this is default)
 * - linear - Specifies an animation with the same speed from start to end
 * - ease-in - Specifies an animation with a slow start
 * - ease-out - Specifies an animation with a slow end
 * - ease-in-out - Specifies an animation with a slow start and end
 * - cubic-bezier(n,n,n,n) - Lets we define our own values in a cubic-bezier function
 */

.parent {
    position: relative;
    width: 400px;
    height: 300px;
    margin: 0 auto;
}
.at {
    position: absolute;
    top: 0;
    left: 0;
    width: 30px;
    height: 30px;
    margin: 30px 0;
    background: darkgray;
    animation-name: timing;
    animation-duration: 3s;
    animation-iteration-count: infinite;
    /* animation-timing-function: ease; */
    /* animation-timing-function: ease-in; */
    animation-timing-function: ease-out;
    /* animation-timing-function: ease-in-out; */
    /* animation-timing-function: cubic-bezier(); */
    /* animation-timing-function: linear; */
}
@keyframes timing {
    25% {
        background: darkgoldenrod;
        top: 0;
        left: 200px;
    }
    50% {
        background: darkmagenta;
        top: 200px;
        left: 200px;
    }
    75% {
        background: darkcyan;
        top: 200px;
        left: 0;
    }
    100% {
        background: darkgray;
        top: 0;
        left: 0;
    }
}

/**
 * ! animation-fill-mode:
 *
 * * CSS animations do not affect an element before the first keyframe is played or after the last keyframe is played. The animation-fill-mode property can override this behavior
 *
 * - none - Default value. Animation will not apply any styles to the element before or after it is executing
 * - forwards - The element will retain the style values that is set by the last   keyframe (depends on animation-direction and animation-iteration-count)
 * - backwards - The element will get the style values that is set by the first keyframe (depends on animation-direction), and retain this during the animation-delay period
 * - both - The animation will follow the rules for both forwards and backwards, extending the animation properties in both directions
 */

.fm {
    width: 150px;
    height: 150px;
    background: lightsalmon;
}
.fm:hover {
    animation-name: fm;
    animation-duration: 2s;
    animation-timing-function: linear;
    /* animation-fill-mode: none; */
    /* animation-fill-mode: backwards; */
    animation-fill-mode: forwards;
    /* animation-fill-mode: both; */
}
@keyframes fm {
    0% {
        background: lightskyblue;
    }
    25% {
        background: lightgreen;
    }
    50% {
        background: lightcoral;
    }
    75% {
        background: lightpink;
    }
    100% {
        background: lightseagreen;
    }
}

/**
 * ! animation (shorthand):
 * ? animation: name duration timing-function delay iteration-count direction fill-mode;
 * - serial maintain isn't required
 */
.anim {
    background: darkkhaki;
    animation: anim2 3s linear 3s infinite reverse forwards;
}

@keyframes anim2 {
    0% {
        background: lightyellow;
        width: 210px;
        height: 210px;
    }
    30% {
        background: lightsalmon;
        width: 212px;
        height: 212px;
    }
    60% {
        background: lime;
        width: 218px;
        height: 218px;
    }
    80% {
        background: cornflowerblue;
        width: 220px;
        height: 220px;
    }
    100% {
        background: cornsilk;
        width: 225px;
        height: 225px;
    }
}
